---
title: "class13"
author: "Whitney Tran (PID:16781338)"
format: pdf
---

In today's class we will explore and analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Data Import

We have two input files, so-called

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```


>Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

There are 38694 genes in this dataset.

>Q2. How many ‘control’ cell lines do we have? 

```{r}

sum(metadata$dex == "control")
```

There are 4 control cell lines.

## Toy dfferential gene expression.

TIme to do some analysis.

We have 4 control and 4 treated samples/experiments/columns.

Make sure the metadata id column matcjes the coumns in our countdata.

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

To check that all elements of a vector are TRUE, we can use the `all()` function.

```{r}
all(c(T,T,T,F))
```

```{r}
all(colnames(counts)  == metadata$id)
```

To start I will calculate the `control.mean` and `treated.mean` values and compare theme.
- identify and etract the `control` only columns
- determine the mean value for each gene (i.e. row)
- do the same for treated

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
control.mean <- apply(control.counts, 1, mean)
```


```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ ,treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```


Let's store these together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


Have a quick view of this data

```{r}
plot(meancounts)
```

This data is screaming at us to log transform as it is so heavily skewer and over such a wide range.

```{r}
plot(meancounts, log="xy")
```


I want to compare the treated and the control values here and we will use fold change in log2 units to do this.log2(Treated/Control)

```{r}
log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc <- log2fc
```

```{r}
log2(20/20)
```

No difference

A doubling in the treated:
```{r}
log2(20/10)
```


```{r}
log2(5/10)
log2(40/10)
```


A common rule of thumb cut-off for calling a gene "differentially  expressed" is a log2 fold-change value of either >+2 or <-2 for "up regulated" and "down reglated" respectively.

```{r}
head(meancounts)
```

```{r}
sum(meancounts$log2fc > +2, na.rm=T)
```

We fist need to remove zer count genes - as we can't say anything about these genes anyway and their ivision oflog vlues are messing things up (divide by zero) or the - infinity log problem.

```{r}
to.rm.ind <- rowSums(meancounts[,1:2] ==0)>0

mycounts <-meancounts[!to.rm.ind,]
```


>Q. How many genes do we have left that we can say smth about (i.e. they don't have any zero counts)?

```{r}
nrow(mycounts)
```

```{r}
up.ind <-mycounts$log2fc >2
down.ind <- mycounts$log2fc < (-2)
```

>Q8.Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)

```

250 upregulated genes.

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```

367 downregulated genes.

>Q10. Do you trust these results? Why or why not?

No we are missing stats!! Are these differences significant?

##DESeq analysis

Let's do this properly with the help of the DESeq2 package.

```{r}
#/ message:false
library(DESeq2)
```


We have to usea specific data object for working with DESeq.

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                       colData= metadata,
                       design = ~dex)
```

Run our main analysis with the `DESeq()` function.

```{r}
dds <- DESeq(dds)
```

To get the results out of our `dds` object we can use the DESeq function called `results()`

```{r}
res <- results(dds)
head(res)
```


# Volcano Plot

A very common and useful summary results figure from this type of analysis is called a volcano plot - a plot of log2FC vs P-value. We use the `padj` the adjusted P-value for multiple testing.

```{r}
plot(res$log2FoldChange, res$padj)
```


```{r}
plot(res$log2FoldChange, -log(res$padj))
```

add some color and nice labels for this plot.

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
```


## Add Annotation Data

```{r}
head(res)
```
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```


```{r}
columns(org.Hs.eg.db)
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
                     
```

```{r}
head(res)
```


I also want entrez IDs

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",     # The new format we want to add
                     multiVals="first")

head(res)
                     
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```



## Pathway Analysis

Now that I have added the necessary annotation data I can talk to different databases taht use these IDs

We will use the `gage` package to do geneset analysis (aka pathway analysis, genset enrichment, overlap analysis)

BiocManager::install( c("pathview", "gage", "gageData") )

We will use KEGG first()

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

```

THe main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```



I can now use the returned pathways IDs from KEGG as input to the `pathview` package to make pathway figures with our DEGs highlighted.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")

```

![](hsa05310.pathview.png)



